@page "/tasks"

<h3>Wszystkie zadania</h3>

@* wyświetlanie przycisku do tworzenia nowych zadań *@
@if (Login.UserLoggedIn.If_manager == 1 || Login.UserLoggedIn.If_manager == 2)
{
    <div>
        <div class="actionBtn">
            <button class="btn btn-primary" @onclick="AddTask">Dodaj zadanie</button>
        </div>
        <div class="actionBtn">
            <button class="btn btn-primary" @onclick="EditTask">Edytuj zadanie</button>
        </div>
        <div class="actionBtn">
            <button class="btn btn-primary" id="deleteBtn" @onclick="DeleteTask">Usuń zadanie</button>
        </div>
    </div>
}

<div class="actionBtn" style="float: right; width: auto;">
    <label>Szukaj:</label>
    <input type="text" @bind-value="searchStr" @onkeyup="@SearchOnEnter" />
</div>
<br />
<br />

<div>
    @*TODO - zaimplementować obsługę opcji z ContextMenu (głównie edit i delete)*@
    <SfGrid @ref="DefaultGrid"
            DataSource="TaskList"
            AllowPaging="true"
            AllowSorting="true"
            AllowFiltering="true"
            AllowSelection="true"
            Locale="pl"
            ContextMenuItems="@(new List<object>()
            { "AutoFit", "AutoFitAll", "SortDescending", "SortAscending"})">
        <GridFilterSettings EnableCaseSensitivity="false"></GridFilterSettings>
        <GridPageSettings PageSize="9"></GridPageSettings>
        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
        <GridSelectionSettings EnableToggle="true"></GridSelectionSettings>
        <GridEvents TValue="TaskModel"
                    RowSelected="RowSelectHandler"
                    RowDeselected="RowDeselectHandler"
                    OnRecordDoubleClick="DisplayTaskDetails"
                    OnRecordClick="ExpandTaskDetails"
                    >
        </GridEvents>

        <GridColumns>
            <GridColumn Field=@nameof(TaskModel.Task_id) IsPrimaryKey="true" HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Name) HeaderText="Nazwa" TextAlign="TextAlign.Left" Width="250"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Status) HeaderText="Status" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Start_time) HeaderText="Data rozpoczęcia" Format="d" Type="ColumnType.Date"
                        TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Deadline) HeaderText="Deadline" Format="d" Type="ColumnType.Date"
                        TextAlign="TextAlign.Left" Width="120"></GridColumn>
        </GridColumns>
    </SfGrid>

    <div class="form-group">
        <SfToast @ref="NoSelectedTask" Title="Wybierz zadanie!" Timeout=2000>
            <ToastPosition X="Center"></ToastPosition>
        </SfToast>
    </div>
</div>

@code {
    SfToast NoSelectedTask;
    private SfGrid<TaskModel> DefaultGrid;
    private string searchStr;
    private static List<TaskModel> TaskList;
    public static TaskModel SelectedTask;

    protected override void OnInitialized()
    {
        if (Login.UserLoggedIn.If_manager == -1)
        {
            NavigationManager.NavigateTo("/");
        }

        SelectedTask = new TaskModel();

        TaskList = TaskData.GetAllByCompanyId(Pages.Login.UserLoggedIn.Company_id);
    }

    public void RowSelectHandler(RowSelectEventArgs<TaskModel> args)
    {
        SelectedTask = args.Data;
    }

    public void RowDeselectHandler()
    {
        SelectedTask = null;
    }

    private void SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            this.DefaultGrid.Search(searchStr);
        }
    }

    private void AddTask(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/add-task");
    }

    private void EditTask(MouseEventArgs e)
    {
        if (SelectedTask != null)
        {
            NavigationManager.NavigateTo("/task-details");
        }
        else
        {
            NoSelectedTask.Show();
        }
    }

    private void DeleteTask(MouseEventArgs e)
    {
        if (SelectedTask != null)
        {
            //TODO - delete selected task
        }
        else
        {
            NoSelectedTask.Show();
        }
    }

    private void DisplayTaskDetails(RecordDoubleClickEventArgs<TaskModel> args)
    {
        SelectedTask = args.RowData;

        if (SelectedTask != null)
        {
            NavigationManager.NavigateTo("/task-details");
        }
    }

    // TODO - testowe zachowanie - do poprawy LUB usuniecia i rozwijania szczegółów w inny sposób
    private void ExpandTaskDetails(RecordClickEventArgs<TaskModel> args)
    {
        SelectedTask = args.RowData;

        if (SelectedTask != null)
        {
            // NavigationManager.NavigateTo("/task-details");
        }
    }
}

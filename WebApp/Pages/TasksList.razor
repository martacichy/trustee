@page "/tasks"
@*@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper*@

<h3>Wszystkie zadania</h3>

@* wyświetlanie przycisku do tworzenia nowych zadań *@
@if (WebApp.Pages.Login.UserLoggedIn.If_manager == 1 || WebApp.Pages.Login.UserLoggedIn.If_manager == 2)
{
    <div>
        <div class="search" style="float: left;">
            <button class="btn btn-primary" @onclick="AddNew">Dodaj zadanie</button>
        </div>
    </div>

    @if (addButtonClicked)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <h3 class="modal-title">Dodaj nowe zadanie</h3>
                        <button type="button" class="close" @onclick="CloseAdd">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <EditForm Model="@Task">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="Tytuł" class="control-label" required>Tytuł</label>
                                <input for="Tytuł" class="form-control" @bind-value="Task.name" />
                                <ValidationMessage For="@(() => Task.name)" />
                            </div>
                            <div class="form-group">
                                <label for="Opis" class="control-label">Opis</label>
                                <input for="Opis" class="form-control" @bind-value="Task.description" />
                                <ValidationMessage For="@(() => Task.description)" />
                            </div>
                            <div class="form-group">
                                <label for="Starttime" class="control-label">Czas rozpoczęcia</label>
                                <input for="Starttime" type="date" class="form-control" @bind-value="Task.start_time" />
                                <ValidationMessage For="@(() => Task.start_time)" />
                            </div>
                            <div class="form-group">
                                <label for="Deadline" class="control-label">Deadline</label>
                                <input for="Deadline" type="date" class="form-control" @bind-value="Task.deadline" />
                                <ValidationMessage For="@(() => Task.deadline)" />
                            </div>
                            <div class="form-group">
                                <label for="Status" class="control-label">Status zadania</label>
                                <input for="Status" class="form-control" @bind-value="Task.status" />
                                <ValidationMessage For="@(() => Task.status)" />
                            </div>
                            <div class="form-group">
                                <label for="IfAutoAssigned" class="control-label">Czy przydzielić automatycznie?</label>
                                <input for="IfAutoAssigned" type="checkbox" class="form-control" @bind-value="Task.auto_assigned" />
                            </div>

                            <div class="form-group">
                                <label asp-for="etykiety" class="control-label">Etykiety</label>
                                <input for="etykiety" type="text" placeholder="Szukaj..." class="form-control" />
                                <button class="btn btn-default btn-xs">Dodaj</button>
                            </div>
                            <div class="form-group">
                                <button type="submit" class="btn btn-block btn-info" data-dismiss="modal" @onclick="SaveTask">Zapisz</button>
                                <SfToast @ref="ToastObj" Title="Dodano nowe zadanie!" Timeout=3000 Content="@ToastContent">
                                    <ToastPosition X="Right"></ToastPosition>
                                </SfToast>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
}

<div class="search" style="float: right; width: auto;">
    <label >Szukaj:</label>
    <input type="text" @bind-value="searchStr" @onkeyup="@SearchOnEnter" />
</div>
<br/><br/>

<div>
    <SfGrid @ref="DefaultGrid"
            DataSource="TaskList"
            AllowPaging="true"
            AllowSorting="true"
            AllowFiltering="true">
        <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
        <GridFilterSettings EnableCaseSensitivity="false"></GridFilterSettings>
        <GridPageSettings PageSize="12"></GridPageSettings>
        <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>

        <GridColumns>
            <GridColumn Field=@nameof(TaskModel.Task_id) HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Name) HeaderText="Nazwa" TextAlign="TextAlign.Left" Width="250"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Status) HeaderText="Status" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Start_time) HeaderText="Data rozpoczęcia" Format="d" Type="ColumnType.Date"
                        TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(TaskModel.Deadline) HeaderText="Deadline" Format="d" Type="ColumnType.Date"
                        TextAlign="TextAlign.Left" Width="120"></GridColumn>
        </GridColumns>

    </SfGrid>
</div>

<style>
    .search {
        width: 200px;
        display: inline-block;
        white-space: nowrap;
    }
</style>


@code {
    SfToast ToastObj;
    private SfGrid<TaskModel> DefaultGrid;
    private Boolean addButtonClicked;
    private string searchStr;
    private string ToastContent { get; set; } = "Zadanie zostało pomyślnie dodane.";
    private BackendLibrary.Validation.TaskValidation Task = new BackendLibrary.Validation.TaskValidation();
    public static List<BackendLibrary.Models.TaskModel> TaskList;

    protected override void OnInitialized()
    {
        TaskList = BackendLibrary.DataAccess.TaskData.GetAllByCompanyId(WebApp.Pages.Login.UserLoggedIn.Company_id);
        addButtonClicked = false;
    }

    /// <summary> Dodaje do bazy danych taska, ktory zostal nakreślony w gui aplikacji
    /// </summary>
    public void SaveTask()
    {
        // company_id jest wpisywane na sztywno, jednak to należy poprawić, by pobierało od pracownika
        BackendLibrary.Models.TaskModel newTask =
        new BackendLibrary.Models.TaskModel(1, Task.name, Task.description, Task.start_time, Task.deadline, Task.status, Task.auto_assigned);

        BackendLibrary.DataAccess.TaskData.AddTask(newTask);
        ToastObj.Show();
    }

    private void AddNew(MouseEventArgs e)
    {
        addButtonClicked = true;
    }

    private void CloseAdd(MouseEventArgs e)
    {
        addButtonClicked = false;
    }

    private void SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            this.DefaultGrid.Search(searchStr);
        }
    }
}
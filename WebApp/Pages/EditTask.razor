@page "/Edit-task"

@inject NavigationManager NavigationManager
@inject NavigationManager uriHelper;

<EditForm Model="@Task">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Tytuł" class="control-label" required>Tytuł</label>
        <input for="Tytuł" class="form-control" @bind-value="Task.name" />
        <ValidationMessage For="@(() => Task.name)" />
    </div>
    <div class="form-group">
        <label for="Opis" class="control-label">Opis</label>
        <input for="Opis" class="form-control" @bind-value="Task.description" />
        <ValidationMessage For="@(() => Task.description)" />
    </div>
    <div class="form-group">
        <label for="Starttime" class="control-label">Czas rozpoczęcia</label>
        <input for="Starttime" type="date" class="form-control" @bind-value="Task.start_time" />
        <ValidationMessage For="@(() => Task.start_time)" />
    </div>
    <div class="form-group">
        <label for="Deadline" class="control-label">Deadline</label>
        <input for="Deadline" type="date" class="form-control" @bind-value="Task.deadline" />
        <ValidationMessage For="@(() => Task.deadline)" />
    </div>
    <div class="form-group">
        <label for="Status" class="control-label">Status zadania</label>
        <input for="Status" class="form-control" @bind-value="Task.status" />
        <ValidationMessage For="@(() => Task.status)" />
    </div>
    <div class="form-group">
        <label for="IfAutoAssigned" class="control-label">Czy przydzielić automatycznie?</label>
        <input for="IfAutoAssigned" type="checkbox" class="form-control" @bind-value="Task.auto_assigned" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-block btn-info" data-dismiss="modal" @onclick="UpdateTask">Zapisz</button>
        <SfToast @ref="ToastObj" Title="Zadanie zaktualizowane pomyslnie!" Timeout=3000 Content="@ToastContent">
            <ToastPosition X="Right"></ToastPosition>
        </SfToast>
        <SfToast @ref="FailedObj" Title="Brak zmian w zadaniu!" Timeout=3000 Content="@FailedContent">
            <ToastPosition X="Right"></ToastPosition>
        </SfToast>
    </div>
</EditForm>

@code {
    SfToast ToastObj;
    SfToast FailedObj;
    private string ToastContent { get; set; } = "Zadanie zaktualizowane pomyslnie!";
    private string FailedContent { get; set; } = "Brak zmian w zadaniu!";
    private BackendLibrary.Validation.EditTaskValidation Task;
    DateTime defaultDate = new DateTime(0001, 1, 1, 0, 0, 0);

    protected override void OnInitialized()
    {
        if (Login.UserLoggedIn.If_manager == -1)
        {
            NavigationManager.NavigateTo("/");
        }

        Task = new BackendLibrary.Validation.EditTaskValidation();
    }

    /// <summary>
    /// Aktualizuje w bazie danych zadanie, które zostało nakreślone w gui aplikacji.
    /// </summary>
    private void UpdateTask()
    {
        bool if_updated = false; // sprawdza, czy uzytkownik wyedytowal cokolwiek w zadaniu true/false
                                 // poniższe ify sprawdzaja, czy pole do edycji zawiera cos nowego, po czym przypisuje wartosci do Selected_Task oraz zmienia if_updated na true
        if (Task.name != null)
        {
            Pages.TasksList.SelectedTask.Name = Task.name;
            if_updated = true;
        }

        if (Task.description != null)
        {
            Pages.TasksList.SelectedTask.Description = Task.description;
            if_updated = true;
        }

        if (Task.status != null)
        {
            Pages.TasksList.SelectedTask.Status = Task.status;
            if_updated = true;
        }

        if ((DateTime.Compare(Task.start_time, defaultDate)) != 0)
        {
            Pages.TasksList.SelectedTask.Start_time = Task.start_time;
            if_updated = true;
        }

        if ((DateTime.Compare(Task.deadline, defaultDate)) != 0)
        {
            Pages.TasksList.SelectedTask.Deadline = Task.deadline;
            if_updated = true;
        }

        if (Pages.TasksList.SelectedTask.Auto_assigned != Task.auto_assigned)
        {
            Pages.TasksList.SelectedTask.Auto_assigned = Task.auto_assigned;
            if_updated = true;
        }

        if (if_updated == true) //sprawdza czy uzytkownik wyedytowal cos w zadaniu, jesli tak, updatuje wartosci w database oraz wystwietla stosowna informacje
        {
            BackendLibrary.Models.TaskModel updatedTask =
            new BackendLibrary.Models.TaskModel(TasksList.SelectedTask.Task_id, TasksList.SelectedTask.Company_id,
            TasksList.SelectedTask.Name, TasksList.SelectedTask.Description, TasksList.SelectedTask.Start_time,
            TasksList.SelectedTask.Deadline, TasksList.SelectedTask.Status, TasksList.SelectedTask.Auto_assigned, TasksList.SelectedTask.Project_id);

            BackendLibrary.DataAccess.TaskData.UpdateTask(updatedTask);

            ToastObj.Show();
        }
        else FailedObj.Show(); //wyswietla na ekran informacje o braku zmian w zadaniu
        ClearTask(); //czysci pola obiektu task

    }

    private void ClearTask()
    {
        Task.name = null;
        Task.description = null;
        Task.start_time = defaultDate;
        Task.deadline = defaultDate;
        Task.status = null;
        Task.auto_assigned = 0;
    }
}

<style>

    .form-group {
        padding-top: 15px;
        width: 350px;
        margin: 0 auto;
    }
</style>
@page "/employees"
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div class="header">
    <br />
    <br />
    <h3>Pracownicy</h3>

</div>
    
<div>
    @if (Login.UserLoggedIn.If_manager == 2)
    {
        <div class="actionBtn">
            <Sfbutton class="btn btn-primary" @onclick="AddEmployee"><i class="fa fa-plus"></i>&nbsp;Nowy pracownik</Sfbutton>
        </div>
        <div class="actionBtn">
            <Sfbutton class="btn btn-primary" @onclick="EditEmployee"><i class="fa fa-edit"></i>&nbsp;Edytuj</Sfbutton>
        </div>
    }
</div>
        <div class="form-group">
            <SfToast @ref="NoSelectedEmployee" Title="Wybierz pracownika!" Timeout=2000>
                <ToastPosition X="Center"></ToastPosition>
            </SfToast>
        </div>
        @*Edycja pracownika*@
        <SfDialog @bind-Visible="@VisibilityEdit" AllowDragging="true" Width="400px" Height="400px" IsModal="true" ShowCloseIcon="true">
            <DialogTemplates>
                <Content>
                    <div class="dane">
                        <label for="Imie">@SelectedEmployee.First_name</label>
                        <label for="Nazwisko">@SelectedEmployee.Last_name</label>
                    </div>
                    <EditForm Model="@EmployeeEdit">
                        <DataAnnotationsValidator />
                        <div class="col-lg-12 control-section multiselect-height">
                            <div class="control-wrapper multi-select-parent">
                                <div class="padding-top">
                                    <label asp-for="Rola" class="control-label">Rola</label>
                                    <SfDropDownList TValue="string" TItem="string"
                                                    @bind-Value="@EmployeeEdit.role"
                                                    Placeholder="Szukaj..."
                                                    Enabled=@Enabled
                                                    DataSource="@rola" AllowFiltering="true">
                                        <DropDownListFieldSettings Text="status"> </DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => EmployeeEdit.role)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 control-section multiselect-height">
                            <div class="control-wrapper multi-select-parent">
                                <div class="padding-top">
                                    <label asp-for="etykiety" class="control-label">Etykiety</label>
                                    <SfMultiSelect TValue="string[]" TItem="BackendLibrary.Models.LabelModel"
                                                   @bind-Value="@nameoflabels"
                                                   Enabled=@Enabled
                                                   Placeholder="Szukaj..."
                                                   DataSource="@labelsInDb" AllowFiltering="true" AllowCustomValue="true"
                                                   Mode="@VisualMode.Box">
                                        <MultiSelectFieldSettings Text="Name">  </MultiSelectFieldSettings>
                                    </SfMultiSelect>
                                    <ValidationMessage For="@(() => EmployeeEdit.SelectedLabel)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 control-section multiselect-height">
                            <div class="control-wrapper multi-select-parent">
                                <div class="padding-top">
                                    <label asp-for="projekt" class="control-label">Projekt</label>
                                    <SfMultiSelect TValue="string[]" TItem="BackendLibrary.Models.ProjectModel"
                                                   @bind-Value="@nameofProjects"
                                                   Enabled=@Enabled
                                                   Placeholder="Szukaj..."
                                                   DataSource="@projectsInDb" AllowFiltering="true"
                                                   Mode="@VisualMode.Box">
                                        <MultiSelectFieldSettings Text="Name"></MultiSelectFieldSettings>
                                    </SfMultiSelect>
                                </div>
                            </div>
                        </div>
                        <br />
                        <br />
                        <div class="col-12 text-center">
                            <button class="btn btn-primary" data-dismiss="modal" @onclick="UpdateEmployee" hidden=@readOnly>Zapisz</button>
                            <SfToast @ref="ToastObj" Title="Dane zaktualizowane pomyslnie!" Timeout=3000 Content="@ToastContentEdit">
                                <ToastPosition X="Right"></ToastPosition>
                            </SfToast>
                            <SfToast @ref="FailedObj" Title="Brak zmian!" Timeout=3000 Content="@FailedContent">
                                <ToastPosition X="Right"></ToastPosition>
                            </SfToast>
                        </div>
                    </EditForm>
                </Content>
            </DialogTemplates>
            <DialogEvents Closed="@DialogEditClosed"></DialogEvents>
            <DialogAnimationSettings Effect="DialogEffect.Fade"></DialogAnimationSettings>
        </SfDialog>
    @*Dodawanie nowego pracownika*@
        <SfDialog @bind-Visible="@visibility" IsModal="true" Target="#target" Width="500px" ShowCloseIcon="true">
            <DialogEvents></DialogEvents>
            <DialogAnimationSettings Effect="DialogEffect.Zoom"></DialogAnimationSettings>
            <DialogTemplates>
                <Header>
                    Dodaj pracownika
                </Header>
                <Content>
                    <div class="form-control">
                        <label>Wprowadź adres e-mail przypisany do pracownika, którego chcesz dodać.</label>
                        <input type="email" @bind-value="@inputValue" name="Required" class="e-input" style="width: 415px;">
                        <label style="color: indianred">@errorMessage</label>
                    </div>
                </Content>
            </DialogTemplates>
            <SfButton>
                <SfButton Content="Dodaj" IsPrimary="true" OnClick="@submitAdd" />
            </SfButton>
        </SfDialog>

        <br />
        <br />

        <SfGrid DataSource="EmployeeList"
                AllowPaging="true"
                AllowSorting="true"
                AllowFiltering="false"
                ContextMenuItems="@(new List<object>()
            {"SortAscending", "SortDescending", "Copy"})">
            <GridPageSettings PageSize="12"></GridPageSettings>
            <GridSearchSettings IgnoreCase="true"></GridSearchSettings>
            <GridEvents TValue="EmployeeModel"
                        OnRecordDoubleClick="DisplayEmployeeDetails">
            </GridEvents>
            <GridColumns>
                <GridColumn Field=@nameof(EmployeeModel.Employee_id) IsPrimaryKey="true" HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                <GridColumn Field=@nameof(EmployeeModel.First_name) HeaderText="Imię" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn Field=@nameof(EmployeeModel.Last_name) HeaderText="Nazwisko" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                <GridColumn Field=@nameof(EmployeeModel.Email) HeaderText="E-mail" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                <GridColumn Field=@nameof(EmployeeModel.UserType) HeaderText="Rodzaj" TextAlign="TextAlign.Left" Width="80"></GridColumn>
                <GridColumn HeaderText="Zarządzaj" Width="150">
                    <GridCommandColumns>
                        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    </GridCommandColumns>
                </GridColumn>
            </GridColumns>
        </SfGrid>


@code {
    /// <summary>
    /// Strona wyświetlająca listę pracowników.
    /// </summary>
    SfToast NoSelectedEmployee;

    public static List<EmployeeModel> EmployeeList;
    public static EmployeeModel SelectedEmployee;
    public int length;
    private EditEmployeeValidation Employee;
    private Boolean visibility { get; set; }
    string inputValue, errorMessage;
    private bool readOnly = false;
    private bool Enabled = true;
    private SfGrid<EmployeeModel> DefaultGrid;
    private string searchStr;

    private List<String> rola = new List<String>(new string[] { "Pracownik", "Kierownik", "Szef" });
    SfToast ToastObj;
    SfToast FailedObj;
    private string ToastContentEdit { get; set; } = "Dane zaktualizowane pomyslnie!";
    private string FailedContent { get; set; } = "Brak zmian!";
    private BackendLibrary.Validation.EditEmployeeValidation EmployeeEdit;
    DateTime defaultDate = new DateTime(0001, 1, 1, 0, 0, 0);
    private Boolean VisibilityEdit { get; set; }
    private string[] nameoflabels { get; set; } = new string[] { };
    private string[] oldlabels { get; set; } = new string[] { };
    private string[] nameofProjects { get; set; } = new string[] { };
    private string[] oldProjects { get; set; } = new string[] { };
    public static List<BackendLibrary.Models.EmployeeModel> ListOfEmployee;
    public static List<BackendLibrary.Models.EmployeeTaskModel> ListofEmployeesId;
    private int[] nameofEmployees { get; set; } = new int[] { };
    public static List<BackendLibrary.Models.EmployeeLabelModel> ListofLabelsId;
    public static List<BackendLibrary.Models.EmployeeProjectModel> ListofProjectsId;
    private bool isChecked = false;
    public bool EnableProjectDropDown = false;
    //public static List<BackendLibrary.Models.TaskLabelModel> ListofLabelsId;

    private List<BackendLibrary.Models.LabelModel> labelsInDb;
    private List<BackendLibrary.Models.ProjectModel> projectsInDb;
    private string[] selectedLabels { get; set; } = new string[] { };
    private string selectedProject;
    private int lastTaskId;
    private int labelIdByName;
    private int projectIdByName;
    private string mergedSelectedLabels;
    private bool isMergedLabelsMatchToPattern;
    private string pattern = @"^[a-zA-Z0-9]+$";
    private Boolean VisibilityAdd { get; set; }

    protected override void OnInitialized()
    {
        if (Login.UserLoggedIn.If_manager == -1)
        {
            NavigationManager.NavigateTo("/");
        }
        if (Login.UserLoggedIn.If_manager == 0)
        {
            readOnly = true;
            Enabled = false;
        }

        SelectedEmployee = new EmployeeModel();
        EmployeeList = EmployeeData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        EmployeeEdit = new BackendLibrary.Validation.EditEmployeeValidation();
        labelsInDb = BackendLibrary.DataAccess.LabelData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        projectsInDb = BackendLibrary.DataAccess.ProjectData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        length = EmployeeList.Count;
        inputValue = "";
        errorMessage = "";
        visibility = false;
    }

    private void AddEmployee()
    {
        visibility = true;

    }

    private void EditEmployee()
    {
        if (SelectedEmployee != null)
        {
            EmployeeEdit.firstname = SelectedEmployee.First_name;
            EmployeeEdit.lastname = SelectedEmployee.Last_name;
            EmployeeEdit.email = SelectedEmployee.Email;
            EmployeeEdit.role = SelectedEmployee.UserType;
            VisibilityEdit = true;
        }
        else
        {
            NoSelectedEmployee.Show();
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<EmployeeModel> args)
    {
        SelectedEmployee = args.Data;
    }

    public void RowDeselectHandler()
    {
        SelectedEmployee = null;
    }

    private void DialogEditClosed(CloseEventArgs args)
    {
        VisibilityEdit = false;

    }

    private void DisplayEmployeeDetails(RecordDoubleClickEventArgs<EmployeeModel> args)
    {
        SelectedEmployee = args.RowData;

        if (SelectedEmployee != null)
        {
            ListOfEmployee = EmployeeData.GetByIdList(Pages.Employees.SelectedEmployee.Employee_id); //jednoelementowa lista zawierająca wybranego pracownika


            //tutaj przechowywane są id etykiet, nastepnie odpowiednie etykiety wpisane do tablicy
            ListofLabelsId = EmployeeLabelData.GetAllLabelsByEmployeeId(Pages.Employees.SelectedEmployee.Employee_id);
            this.nameoflabels = new string[ListofLabelsId.Count];
            this.oldlabels = new string[ListofLabelsId.Count];

            ListofProjectsId = EmployeeProjectData.GetAllByEmployeeId(Pages.Employees.SelectedEmployee.Employee_id);
            this.nameofProjects = new string[ListofProjectsId.Count];
            this.oldProjects = new string[ListofProjectsId.Count];

            for (int i = 0; i < ListofLabelsId.Count; i++)
            {
                nameoflabels[i] = LabelData.GetById(ListofLabelsId[i].Label_id).Name;
                oldlabels[i] = LabelData.GetById(ListofLabelsId[i].Label_id).Name;
            }

            for (int i = 0; i < ListofProjectsId.Count; i++)
            {
                nameofProjects[i] = ProjectData.GetById(ListofProjectsId[i].Project_id).Name;
                oldProjects[i] = ProjectData.GetById(ListofProjectsId[i].Project_id).Name;
            }


        }



        if (SelectedEmployee != null)
        {
            EmployeeEdit.role = SelectedEmployee.UserType;
            EmployeeEdit.firstname = SelectedEmployee.First_name;
            EmployeeEdit.lastname = SelectedEmployee.Last_name;
            EmployeeEdit.email = SelectedEmployee.Email;
            EmployeeEdit.login = SelectedEmployee.Login;
            EmployeeEdit.password = SelectedEmployee.Password;


            VisibilityEdit = true;
        }
        else
        {
            NoSelectedEmployee.Show();
        }


    }

    private bool IsSelectedLabelsContainsInDbLabels(string label)
    {
        for (int i = 0; i < labelsInDb.Count; i++)
        {
            if (label.Equals(labelsInDb[i].Name))
            {
                return true;
            }
        }
        return false;
    }

    private void SaveLabels(string[] labels)
    {
        if (labels != null)
        {
            for (int i = 0; i < labels.Length; i++)
            {
                if (!IsSelectedLabelsContainsInDbLabels(labels[i]))
                {
                    BackendLibrary.Models.LabelModel new_label = new BackendLibrary.Models.LabelModel
                        (labels[i], WebApp.Pages.Login.UserLoggedIn.Company_id);

                    BackendLibrary.DataAccess.LabelData.AddLabel(new_label);
                }
            }
        }
    }

    private void MergeSelectedLabels(BackendLibrary.Validation.EditEmployeeValidation Employee, string[] selectedLabels)
    {
        mergedSelectedLabels = "";
        if (selectedLabels != null)
        {
            for (int i = 0; i < selectedLabels.Length; i++)
            {
                mergedSelectedLabels += selectedLabels[i];
            }
        }
        Employee.SelectedLabel = mergedSelectedLabels;
        isMergedLabelsMatchToPattern = Regex.IsMatch(mergedSelectedLabels, pattern);

    }

    private void EditEmployeeLabel()
    {
        for (int i = 0; i < ListofLabelsId.Count; i++)
        {
            BackendLibrary.DataAccess.EmployeeLabelData.DeleteEmployeeLabel(ListofLabelsId[i].Employee_id, ListofLabelsId[i].Label_id);
        }

        if (nameoflabels != null)
        {
            for (int i = 0; i < nameoflabels.Length; i++)
            {
                labelIdByName = BackendLibrary.DataAccess.LabelData.GetIdByName(nameoflabels[i]);
                BackendLibrary.Models.EmployeeLabelModel employeeLabel = new BackendLibrary.Models.EmployeeLabelModel
                    (SelectedEmployee.Employee_id, labelIdByName);
                BackendLibrary.DataAccess.EmployeeLabelData.AddEmployeeLabel(employeeLabel);
            }
        }

    }

    private void EditEmployeeProjects()
    {
        for (int i = 0; i < ListofProjectsId.Count; i++)
        {
            BackendLibrary.DataAccess.EmployeeProjectData.DeleteEmployeeProject(ListofProjectsId[i].Employee_id, ListofProjectsId[i].Project_id);
        }

        if(nameofProjects != null)
        {
            for(int i = 0; i < nameofProjects.Length; i++)
            {
                projectIdByName = BackendLibrary.DataAccess.ProjectData.GetIdByName(nameofProjects[i]);
                BackendLibrary.Models.EmployeeProjectModel employeeProject = new BackendLibrary.Models.EmployeeProjectModel(projectIdByName, SelectedEmployee.Employee_id);
                BackendLibrary.DataAccess.EmployeeProjectData.AddEmployeeProject(employeeProject);
            }
        }

    }

    private bool IsProjectsChanged(string project)
    {
        for(int i = 0; i < nameofProjects.Length; i++)
        {
            if (project.Equals(nameofProjects[i])) return true;
        }
        return false;
    }

    private bool IsLabelsChanged(string label)
    {
        for (int i = 0; i < nameoflabels.Length; i++)
        {
            if (label.Equals(nameoflabels[i]))
                return true;
        }
        return false;
    }

    private void UpdateEmployee()
    {
        bool if_updated = false;

        if (EmployeeEdit.role != null && EmployeeEdit.role != SelectedEmployee.UserType)
        {
            if (EmployeeEdit.role == "Pracownik") SelectedEmployee.If_manager = 0;
            else if (EmployeeEdit.role == "Kierownik") SelectedEmployee.If_manager = 1;
            else SelectedEmployee.If_manager = 2;
            if_updated = true;
        }

        if (oldlabels != null && nameoflabels != null)
        {
            if (oldlabels.Length == nameoflabels.Length)
            {
                for (int i = 0; i < nameoflabels.Length; i++)
                {
                    if (IsLabelsChanged(oldlabels[i]) == false)
                    {
                        if_updated = true;
                        break;
                    }
                }
            }
            else
            {
                if_updated = true;
            }
        }
        else
        {
            if (oldlabels == null && nameoflabels == null)
                ;
            else
                if_updated = true;
        }

        if(oldProjects != null && nameofProjects != null)
        {
            if (oldProjects.Length == nameofProjects.Length)
            {
                for (int i = 0; i < nameofProjects.Length; i++)
                {
                    if (IsProjectsChanged(oldProjects[i]) == false)
                    {
                        if_updated = true;
                        break;
                    }
                }
            }
            else if_updated = true;
        }
        else
        {
            if (oldProjects == null && nameofProjects == null) ;
            else if_updated = true;
        }

        if(if_updated == true)
        {
            BackendLibrary.Models.EmployeeModel updatedEmployee = new BackendLibrary.Models.EmployeeModel(SelectedEmployee.Employee_id, SelectedEmployee.Company_id,
                SelectedEmployee.First_name, SelectedEmployee.Last_name, SelectedEmployee.Email, SelectedEmployee.If_manager, SelectedEmployee.Login, SelectedEmployee.Password);

            MergeSelectedLabels(EmployeeEdit, nameoflabels);

            if (isMergedLabelsMatchToPattern)
            {
                if (nameoflabels != null)
                {
                    SaveLabels(nameoflabels);
                }
                BackendLibrary.DataAccess.EmployeeData.UpdateEmployee(updatedEmployee);
                EditEmployeeLabel();
                EditEmployeeProjects();
                ToastObj.Show();
                VisibilityEdit = false;
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
                ClearEmployee();

            }

        }
        else
        {
            FailedObj.Show(); //wyswietla na ekran informacje o braku zmian w pracowniku
        }

    }

    private void EmployeeDetails(MouseEventArgs e)
    {

    }

    /// <summary>
    /// Próba dodania do firmy pracownika o przekazanym adresie e-mail.
    /// </summary>
    private void submitAdd()
    {
        Boolean success = false;

        int employeeId = EmployeeData.GetIdByEmail(inputValue);

        if (employeeId > 0)
        {
            success = EmployeeData.SetCompanyForEmployee(employeeId, Login.UserLoggedIn.Company_id);
        }

        if (success)
        {
            visibility = false;
            errorMessage = "";
            inputValue = "";
        }
        else
        {
            errorMessage = "\nNiepoprawny adres.";
            inputValue = "";
        }
    }

    private void overlayClick(MouseEventArgs args)
    {
        visibility = false;
        errorMessage = "";
        inputValue = "";
    }

    private void closeDialog()
    {
        errorMessage = "";
        inputValue = "";
    }

    private void ClearEmployee()
    {
        EmployeeEdit.role = null;
    }
}
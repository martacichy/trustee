@page "/projects"
<link href="css/popups.css" rel="stylesheet" />

<div class="header">
    <h3>Projekty</h3>
</div>

@if (Login.UserLoggedIn.If_manager == 2 || Login.UserLoggedIn.If_manager == 1)
{
    <div>
        <div class="actionBtn">
            <Sfbutton class="btn btn-primary" @onclick="AddTask">Utwórz nowy projekt</Sfbutton>
        </div>
    </div>
    <br />
    <br />
}

<div>
    @* okno dodawania nowego zadania*@
    <SfDialog @bind-Visible="@visibility" Header="Nowy projekt" Width="500px" IsModal="true" ShowCloseIcon="true">
        <DialogTemplates>
            <Content>
                <EditForm Model="@ProjectAdd">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="Nazwa projektu" class="control-label" required>Nazwa projektu</label>
                        <input for="Nazwa projektu" class="form-control" @bind-value="ProjectAdd.Name" />
                        <ValidationMessage For="@(() => ProjectAdd.Name)" />
                    </div>
                    <div class="col-lg-12 control-section multiselect-height">
                        <div class="control-wrapper multi-select-parent">
                            <div class="padding-top">
                                <label asp-for="pracownicy" class="control-label">Pracownicy</label>
                                <SfMultiSelect TValue="int[]" TItem="EmployeeModel"
                                               @bind-Value="@selectedEmployeesId"
                                               Placeholder="Wybierz..."
                                               DataSource="@employees" AllowFiltering="true"
                                               Mode="@VisualMode.Box">
                                    <MultiSelectTemplates TItem="EmployeeModel">
                                        <!-- Zmieniony Context z default na "SelectedEmployee" aby mogła działać walidacja -->
                                        <ItemTemplate Context="SelectedEmployee">
                                            <div>
                                                <div class="ename">
                                                    @((SelectedEmployee as EmployeeModel).First_name)
                                                    @((SelectedEmployee as EmployeeModel).Last_name)
                                                </div>
                                            </div>
                                        </ItemTemplate>
                                        <ValueTemplate Context="SelectedEmployee">
                                            <div class="multiselect-width">
                                                <div class="name">
                                                    @((SelectedEmployee as EmployeeModel).First_name)
                                                    @((SelectedEmployee as EmployeeModel).Last_name)
                                                </div>
                                            </div>
                                        </ValueTemplate>
                                    </MultiSelectTemplates>
                                    <MultiSelectFieldSettings Text="First_name" Value="Employee_id"></MultiSelectFieldSettings>
                                </SfMultiSelect>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary" data-dismiss="modal" @onclick="SaveProject">Zapisz</button>
                        <SfToast @ref="SubmitToast" Title="Nowy projekt" Timeout=3000 Content="@toastContent">
                            <ToastPosition X="Right"></ToastPosition>
                        </SfToast>
                    </div>
                </EditForm>
            </Content>
        </DialogTemplates>
        <DialogEvents Closed="@closeDialog" OnOverlayClick="@overlayClick"></DialogEvents>
        <DialogAnimationSettings Effect="DialogEffect.Fade"></DialogAnimationSettings>
    </SfDialog>

    @*tabelka z projektami*@
    <SfGrid DataSource="projectList"
            AllowPaging="true"
            AllowSorting="true"
            AllowFiltering="false"
            ContextMenuItems="@(new List<object>()
            { "AutoFit", "AutoFitAll", "SortAscending", "SortDescending", "Copy"})">
        <GridPageSettings PageSize="12"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(ProjectModel.Project_id) IsPrimaryKey="true" HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
            <GridColumn Field=@nameof(ProjectModel.Name) IsPrimaryKey="true" HeaderText="Nazwa Projektu" TextAlign="TextAlign.Left" Width="300"></GridColumn>
        </GridColumns>
    </SfGrid>
</div>

@code {
    /// <summary>
    /// Strona wyświetlająca listę projektów.
    /// </summary>
    SfToast SubmitToast;
    private SfGrid<TaskModel> DefaultGrid;
    public ProjectModel selectedProject;
    private List<ProjectModel> projectList;
    private List<EmployeeModel> employees;
    private ProjectValidation ProjectAdd;
    private int lastProjectId;
    private int[] selectedEmployeesId = new int[] { };
    private Boolean visibility, isChecked;
    string toastContent;

    protected override void OnInitialized()
    {
        if (Login.UserLoggedIn.If_manager == -1)
        {
            NavigationManager.NavigateTo("/");
        }

        ProjectAdd = new ProjectValidation();
        projectList = ProjectData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        employees = EmployeeData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        isChecked = false;
        visibility = false;
    }

    private void AddTask()
    {
        visibility = true;
    }

    /// <summary>
    /// Próba stworzenia nowego projektu.
    /// </summary>
    private void SaveProject()
    {
        ProjectModel newProject;
        if (ProjectAdd.Name != null)
        {
            newProject = new ProjectModel(Login.UserLoggedIn.Company_id, ProjectAdd.Name);

            BackendLibrary.DataAccess.ProjectData.AddProject(newProject);
            AddEmployeesToTask();
            toastContent = "Projekt został pomyślnie utworzony.";
            SubmitToast.Show();
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            visibility = false;
        }
    }

    /// <summary>
    /// Przypisuje pracowników do dodanego projektu.
    /// </summary>
    private void AddEmployeesToTask()
    {
        lastProjectId = BackendLibrary.DataAccess.ProjectData.GetMaxId();
        for (int i = 0; i < selectedEmployeesId.Length; i++)
        {
            EmployeeProjectModel employeeProject = new EmployeeProjectModel(selectedEmployeesId[i], lastProjectId);
            EmployeeProjectData.AddEmployeeProject(employeeProject);
        }
    }

    private void overlayClick(MouseEventArgs args)
    {
        visibility = false;
        isChecked = false;
    }

    private void closeDialog()
    {
        visibility = false;
        isChecked = false;
    }
}
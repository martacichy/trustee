@page "/projects"
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="projects">
    <div class="header">
        <br />
        <br />
        <h3>Projekty</h3>
    </div>


    @if (Login.UserLoggedIn.If_manager == 2 || Login.UserLoggedIn.If_manager == 1)
    {
        <div>
            <div class="actionBtn">
                <Sfbutton class="btn btn-primary" @onclick="OpenTaskAddingWindow"><i class="fa fa-plus"></i>&nbsp;Utwórz nowy projekt</Sfbutton>
            </div>
        </div>
        <br />
        <br />
    }

    @* okno dodawania nowego projektu*@
    <SfDialog @bind-Visible="@visibility" Header="Nowy projekt" Width="500px" Height="300px" IsModal="true" ShowCloseIcon="true">
        <DialogTemplates>
            <Content>
                <EditForm Model="@ProjectAdd">
                    <DataAnnotationsValidator />

                    <div class="col-12">
                        <label for="Nazwa projektu" class="control-label" required>Nazwa projektu</label>
                        <SfTextBox TValue="string" @bind-Value="ProjectAdd.Name" CssClass="e-custom"></SfTextBox>
                        <ValidationMessage For="@(() => ProjectAdd.Name)" />
                    </div>
                    <br />
                    <div class="col-lg-12 control-section multiselect-height">
                        <div class="control-wrapper multi-select-parent">
                            <div class="padding-top">
                                <label asp-for="pracownicy" class="control-label">Pracownicy</label>
                                <SfMultiSelect TValue="int[]" TItem="EmployeeModel"
                                               @bind-Value="@selectedEmployeesId"
                                               Placeholder="Wybierz..."
                                               DataSource="@allEmployees" AllowFiltering="true"
                                               Mode="@VisualMode.Box">
                                    <MultiSelectTemplates TItem="EmployeeModel">
                                        <!-- Zmieniony Context z default na "SelectedEmployee" aby mogła działać walidacja -->
                                        <ItemTemplate Context="SelectedEmployee">
                                            <div>
                                                <div class="ename">
                                                    @((SelectedEmployee as EmployeeModel).First_name)
                                                    @((SelectedEmployee as EmployeeModel).Last_name)
                                                </div>
                                            </div>
                                        </ItemTemplate>
                                        <ValueTemplate Context="SelectedEmployee">
                                            <div class="multiselect-width">
                                                <div class="name">
                                                    @((SelectedEmployee as EmployeeModel).First_name)
                                                    @((SelectedEmployee as EmployeeModel).Last_name)
                                                </div>
                                            </div>
                                        </ValueTemplate>
                                    </MultiSelectTemplates>
                                    <MultiSelectFieldSettings Text="First_name" Value="Employee_id"></MultiSelectFieldSettings>
                                </SfMultiSelect>
                            </div>
                        </div>
                    </div>
                    <br />
                    <br />
                    <div class="col-12 text-center">
                        <button type="submit" class="btn btn-primary" data-dismiss="modal" @onclick="SaveProject">Zapisz</button>
                        <SfToast @ref="SubmitToast" Title="Nowy projekt" Timeout=3000 Content="@toastContent">
                            <ToastPosition X="Right"></ToastPosition>
                        </SfToast>
                    </div>
                </EditForm>
            </Content>
        </DialogTemplates>
        <DialogEvents Closed="@CloseDialog" OnOverlayClick="@OverlayClick"></DialogEvents>
        <DialogAnimationSettings Effect="DialogEffect.Fade"></DialogAnimationSettings>
    </SfDialog>

    @*tabelka z projektami*@
    <SfGrid DataSource="projectList"
            AllowPaging="true"
            AllowSorting="true"
            AllowFiltering="false"
            ContextMenuItems="@(new List<object>() { "SortAscending", "SortDescending", "Copy" })">
        <GridTemplates>
            <DetailTemplate>
                @{
                    var project = (context as ProjectModel);

                    <div class="header-list">
                        <label>Zadania:</label>
                    </div>

                    <SfGrid DataSource="tasks" TValue="TaskModel" Query="@GetTasksQuery(project.Project_id)">
                        <GridPageSettings PageSize="10"></GridPageSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(TaskModel.Task_id) IsPrimaryKey="true" HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(TaskModel.Name) HeaderText="Nazwa" TextAlign="TextAlign.Left" Width="500"></GridColumn>
                            <GridColumn Field=@nameof(TaskModel.Status) HeaderText="Status" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(TaskModel.Start_time) HeaderText="Data rozpoczęcia" Format="d" Type="ColumnType.Date"
                                        TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(TaskModel.Deadline) HeaderText="Data zakończenia" Format="d" Type="ColumnType.Date"
                                        TextAlign="TextAlign.Left"></GridColumn>
                        </GridColumns>
                    </SfGrid>

                    <br />
                    <div class="header-list">
                        <label>Pracownicy:</label>
                    </div>
                    <SfGrid DataSource="employeeProjectPairs" TValue="EmpProjectPair" Query="@GetEmployeesQuery(project.Project_id)">
                        <GridPageSettings PageSize="10"></GridPageSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(EmpProjectPair.Employee_id) HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                            <GridColumn Field=@nameof(EmpProjectPair.First_name) HeaderText="Imię" TextAlign="TextAlign.Left" Width="250"></GridColumn>
                            <GridColumn Field=@nameof(EmpProjectPair.Last_name) HeaderText="Nazwisko" TextAlign="TextAlign.Left" Width="250"></GridColumn>
                            <GridColumn Field=@nameof(EmpProjectPair.Email) HeaderText="E-mail" TextAlign="TextAlign.Left"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                    <br />

                }
            </DetailTemplate>
        </GridTemplates>
        <GridPageSettings PageSize="15"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(ProjectModel.Project_id) IsPrimaryKey="true" HeaderText="ID" TextAlign="TextAlign.Left" Width="50"></GridColumn>
            <GridColumn Field=@nameof(ProjectModel.Name) IsPrimaryKey="true" HeaderText="Nazwa Projektu" TextAlign="TextAlign.Left" Width="300"></GridColumn>
        </GridColumns>
    </SfGrid>

</div>
@code {
    /// <summary>
    /// Strona wyświetlająca listę projektów.
    /// </summary>
    SfToast SubmitToast;
    private SfGrid<TaskModel> DefaultGrid;
    public ProjectModel selectedProject;
    private List<TaskModel> tasks;
    private List<ProjectModel> projectList;
    private List<EmployeeModel> allEmployees;
    private List<EmployeeProjectModel> allEmpProjects;
    private List<EmpProjectPair> employeeProjectPairs;
    private ProjectValidation ProjectAdd;
    private int lastProjectId;
    private int[] selectedEmployeesId = new int[] { };
    private Boolean visibility, isChecked;
    string toastContent;

    /// <summary>
    /// Metoda wywoływana, gdy komponent jest gotowy do uruchomienia. Pobiera dane potrzebne do wyświetlenia.
    /// </summary>
    protected override void OnInitialized()
    {
        if (Login.UserLoggedIn.If_manager == -1)
        {
            NavigationManager.NavigateTo("/");
        }

        ProjectAdd = new ProjectValidation();
        tasks = TaskData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        projectList = ProjectData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        allEmployees = EmployeeData.GetAllByCompanyId(Login.UserLoggedIn.Company_id);
        allEmpProjects = EmployeeProjectData.GetAll();
        isChecked = false;
        visibility = false;

        fillEmployeeProjectPairs();
    }

    /// <summary> Stworzenie listy par pracownik+projekt do wyświetlania w DataGrid </summary>
    private void fillEmployeeProjectPairs()
    {
        employeeProjectPairs = new List<EmpProjectPair>();
        foreach (var element in allEmpProjects)
        {
            employeeProjectPairs.Add(new EmpProjectPair(
                element.Employee_id,
                allEmployees.Find(x => x.Employee_id == element.Employee_id).First_name,
                allEmployees.Find(x => x.Employee_id == element.Employee_id).Last_name,
                allEmployees.Find(x => x.Employee_id == element.Employee_id).Email,
                element.Project_id));
        }
    }

    /// <summary>
    /// Zwraca listę pracowników dla projektu o danym id.
    /// </summary>
    /// <param name="project_id"></param>
    /// <returns></returns>
    private Query GetEmployeesQuery(int project_id)
    {
        return new Query().Where("Project_id", "equal", project_id);
    }

    /// <summary>
    /// Zwraca listę zadań dla projektu o danym id.
    /// </summary>
    /// <param name="project_id"></param>
    /// <returns></returns>
    private Query GetTasksQuery(int project_id)
    {
        return new Query().Where("Project_id", "equal", project_id);
    }

    /// <summary>
    /// Wyświetla okno dodawania zadania.
    /// </summary>
    private void OpenTaskAddingWindow()
    {
        visibility = true;
    }

    /// <summary>
    /// Zapisuje nowo utworzony projekt.
    /// </summary>
    private void SaveProject()
    {
        ProjectModel newProject;
        if (ProjectAdd.Name != null)
        {
            newProject = new ProjectModel(Login.UserLoggedIn.Company_id, ProjectAdd.Name);

            BackendLibrary.DataAccess.ProjectData.AddProject(newProject);
            AddEmployeesToTask();
            toastContent = "Projekt został pomyślnie utworzony.";
            SubmitToast.Show();
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            visibility = false;
        }
    }

    /// <summary>
    /// Przypisuje pracowników do dodanego projektu.
    /// </summary>
    private void AddEmployeesToTask()
    {
        lastProjectId = BackendLibrary.DataAccess.ProjectData.GetMaxId();
        for (int i = 0; i < selectedEmployeesId.Length; i++)
        {
            EmployeeProjectModel employeeProject = new EmployeeProjectModel(lastProjectId, selectedEmployeesId[i]);
            EmployeeProjectData.AddEmployeeProject(employeeProject);
        }
    }

    /// <summary>
    /// Zamyka okno dodawania nowego projektu po kliknięciu poza oknem.
    /// </summary>
    /// <param name="args"></param>
    private void OverlayClick(MouseEventArgs args)
    {
        visibility = false;
        isChecked = false;
    }

    /// <summary>
    /// Zamyka okno dodawania nowego projektu po kliknięciu przycisku zamknij.
    /// </summary>
    private void CloseDialog()
    {
        visibility = false;
        isChecked = false;
    }
}

